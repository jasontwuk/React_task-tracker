{"version":3,"sources":["components/Button.js","components/Header.js","components/Sorter.js","components/Task.js","components/Tasks.js","components/useKeyPress.js","components/AddTaskForm.js","components/EditTaskForm.js","components/useLocalStorage.js","App.js","index.js"],"names":["Button","text","onClick","className","defaultProps","Header","onAdd","Sorter","getColorTasks","Task","task","deleteTask","editTask","color","name","id","time","Tasks","showColorTasks","tasks","originalTasks","setColorTasks","setTasks","transition","useTransition","from","opacity","marginLeft","marginRight","enter","leave","config","duration","useState","dragging","setDragging","dragTask","useRef","dragNode","handleDragEnd","current","removeEventListener","setTimeout","items","document","getElementsByClassName","style","cursor","getStyles","params","currentItem","map","item","key","props","div","draggable","onDragStart","e","target","addEventListener","handleDragStart","onDragEnter","newTasks","JSON","parse","stringify","hoverTaskIndex","findIndex","dragTaskIndex","splice","originalRestTasks","filter","handleDragEnter","useKeyPress","keycode","action","useEffect","onKeydown","keyCode","window","AddTaskForm","saveTask","setName","Date","startDate","setStartDate","setColor","inputRef","focus","onSubmit","preventDefault","getElementById","value","alert","type","placeholder","onChange","ref","selected","date","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","checked","htmlFor","EditTaskForm","onEdit","saveEditTask","clickedTask","useLocalStorage","initialValue","localStorage","getItem","Function","getSavedValue","setValue","setItem","App","showAddTaskForm","setShowAddTaskForm","showEditTaskForm","setShowEditTaskForm","setClickedTask","colorTasks","colorRef","setShowColorTasks","uuidv4","editTaskIndex","t","thisTask","find","length","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.d5a8dd63.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Button = ({ text, onClick }) => {\n  return (\n    <button className=\"btn\" onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  text: \"Button\",\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import Button from \"./Button\";\n\nconst Header = ({ onAdd }) => {\n  return (\n    <header className=\"header\">\n      <h1>Task Tracker</h1>\n      <Button text=\"Add\" onClick={onAdd} />\n    </header>\n  );\n};\n\nexport default Header;\n","const Sorter = ({ getColorTasks }) => {\n  return (\n    <div className=\"sorter\">\n      <ul>\n        <li>\n          <button className=\"all\" onClick={() => getColorTasks(\"all\")}>\n            all\n          </button>\n        </li>\n        <li>\n          <button className=\"blue\" onClick={() => getColorTasks(\"blue\")}>\n            &nbsp;\n          </button>\n        </li>\n        <li>\n          <button className=\"pink\" onClick={() => getColorTasks(\"pink\")}>\n            &nbsp;\n          </button>\n        </li>\n        <li>\n          <button className=\"yellow\" onClick={() => getColorTasks(\"yellow\")}>\n            &nbsp;\n          </button>\n        </li>\n        <li>\n          <button className=\"green\" onClick={() => getColorTasks(\"green\")}>\n            &nbsp;\n          </button>\n        </li>\n        <li>\n          <button className=\"purple\" onClick={() => getColorTasks(\"purple\")}>\n            &nbsp;\n          </button>\n        </li>\n      </ul>\n    </div>\n  );\n};\n\nexport default Sorter;\n","import { FaTimes } from \"react-icons/fa\";\nimport { HiPencilAlt } from \"react-icons/hi\";\n\nconst Task = ({ task, deleteTask, editTask }) => {\n  return (\n    <div className={`task ` + task.color}>\n      <div className=\"task-name-container\">\n        <h3>{task.name}</h3>\n        <FaTimes onClick={() => deleteTask(task.id)} />\n      </div>\n\n      <div className=\"task-time-container\">\n        <span>{task.time}</span>\n        <HiPencilAlt onClick={() => editTask(task.id)} />\n      </div>\n    </div>\n  );\n};\n\nexport default Task;\n","import Task from \"./Task\";\nimport { useTransition, animated } from \"react-spring\";\nimport { useState, useRef } from \"react\";\n\nconst Tasks = ({\n  showColorTasks,\n  tasks,\n  originalTasks,\n  setColorTasks,\n  deleteTask,\n  editTask,\n  setTasks,\n}) => {\n  // !!! for react-spring animation\n  const transition = useTransition(tasks, (task) => task.id, {\n    from: { opacity: 0, marginLeft: -200, marginRight: 200 },\n    enter: { opacity: 1, marginLeft: 0, marginRight: 0 },\n    leave: { opacity: 0, marginLeft: 300, marginRight: -300 },\n    config: { duration: 250 },\n  });\n\n  // !!! for drag and drop feature\n  const [dragging, setDragging] = useState(false);\n\n  const dragTask = useRef();\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    // console.log(\"drag starting..\", params);\n\n    // *** change .task-container cursor style to \"grabbing\" in a sync way\n    setTimeout(() => {\n      const items = document.getElementsByClassName(\"task-container\");\n\n      for (let item of items) {\n        item.style.cursor = \"grabbing\";\n      }\n    }, 0);\n\n    // *** set values\n    dragTask.current = params;\n    dragNode.current = e.target;\n\n    // *** add event listener on the dragged task (when drag end, call handleDragEnd)\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd);\n\n    // *** apply the .current-dragging in a sync way, so when we drag an item, its background will turn grey (looks like a shadow) and the item that we are dragging will still maintain the same look.\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    // console.log(\"Entering drag..\", params);\n    // console.log(e.target);\n    // console.log(dragNode.current);\n\n    // *** make a deep copy of tasks\n    let newTasks = JSON.parse(JSON.stringify(tasks));\n\n    // *** when entered task (e.target) and dragged task (dragNode.current) are different...\n    // *** [Note: it means the dragged task is hover other tasks]\n    if (e.target !== dragNode.current) {\n      // console.log(\"target is not the same\");\n\n      // *** get the hovered task's index\n      let hoverTaskIndex = newTasks.findIndex((task) => task.id === params.id);\n      // console.log(hoverTaskIndex);\n\n      // *** get the dragged task's index\n      let dragTaskIndex = newTasks.findIndex(\n        (task) => task.id === dragTask.current.id\n      );\n      // console.log(dragTaskIndex);\n\n      // *** innner splice(): get the dragged task and delete it from the newTasks\n      // *** [Note: It returns an array, so use \"[0]\" to access the only item in this array]\n      // *** outter splice(): insert the dragged task into the hovered task's position\n      newTasks.splice(hoverTaskIndex, 0, newTasks.splice(dragTaskIndex, 1)[0]);\n    }\n\n    // *** call setColorTasks() to update colorTasks in App.js\n    // *** [Note: this code can alter colorTasks, without it its swap effect won't show]\n    setColorTasks(newTasks);\n\n    // *** when showColorTasks is true (when a specific color tasks is chose)\n    if (showColorTasks) {\n      // *** get rest of the color tasks (except the chosen one)\n      // *** [Note: newTasks is an array, use \"[0]\" to access the first item to represent the rest items (their color value are all the same)]\n      const originalRestTasks = originalTasks.filter(\n        (task) => task.color !== newTasks[0].color\n      );\n      // console.log(originalRestTasks);\n\n      // *** update newTasks (newTasks + originalRestTasks)\n      newTasks = [...newTasks, ...originalRestTasks];\n      // console.log(newTasks);\n    }\n\n    // *** call setTasks() to update tasks in App.js\n    setTasks(newTasks);\n  };\n\n  const handleDragEnd = () => {\n    // console.log(\"ending drag..\");\n\n    // *** set dragging to false\n    setDragging(false);\n\n    // *** remove handleDragEnd eventListener\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd);\n\n    // *** reset values\n    dragTask.current = null;\n    dragNode.current = null;\n\n    // *** change .task-container cursor style to \"grab\" in a sync way\n    setTimeout(() => {\n      const items = document.getElementsByClassName(\"task-container\");\n\n      for (let item of items) {\n        item.style.cursor = \"grab\";\n      }\n    }, 0);\n  };\n\n  const getStyles = (params) => {\n    const currentItem = dragTask.current;\n    // console.log(params);\n    // console.log(currentItem);\n\n    // *** add .current-dragging to the dragging task\n    if (params.id === currentItem.id) {\n      return \"current-dragging task-container\";\n    }\n    return \"task-container\";\n  };\n\n  return (\n    <div className=\"tasks-container\">\n      {transition.map(({ item, key, props }) => (\n        <animated.div\n          key={key}\n          style={props}\n          draggable\n          onDragStart={(e) => {\n            handleDragStart(e, item);\n          }}\n          className={dragging ? getStyles(item) : \"task-container\"}\n          onDragEnter={\n            dragging\n              ? (e) => {\n                  handleDragEnter(e, item);\n                }\n              : null\n          }\n        >\n          <Task task={item} deleteTask={deleteTask} editTask={editTask} />\n        </animated.div>\n      ))}\n    </div>\n  );\n};\n\nexport default Tasks;\n","import { useEffect } from \"react\";\n\n// *** keycode {number}  - the code of the key to respond to, compared against event.keyCode\n// *** action {function}  - the action to perform on key press\n\nconst useKeyPress = (keycode, action) => {\n  useEffect(() => {\n    const onKeydown = (e) => {\n      if (e.keyCode === keycode) {\n        action();\n      }\n    };\n\n    window.addEventListener(\"keydown\", onKeydown);\n\n    return () => {\n      window.removeEventListener(\"keydown\", onKeydown);\n    };\n  }, []);\n};\n\nexport default useKeyPress;\n","import { useEffect, useState, useRef } from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport useKeyPress from \"./useKeyPress\";\n\nconst AddTaskForm = ({ onAdd, saveTask }) => {\n  const [name, setName] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date());\n  const [color, setColor] = useState(\"blue\");\n  const inputRef = useRef();\n\n  useEffect(() => {\n    // !!! focus on the first input box when component loaded\n    inputRef.current.focus();\n  }, []);\n\n  // !!! close add task form window by clicking esc key (keyCode: 27)\n  useKeyPress(27, () => onAdd());\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // *** check if the task is empty\n    if (!name) {\n      alert(\"Please enter a task name.\");\n      return;\n    }\n\n    // *** get #date-picker's input value, then set it to \"time\" property\n    const datePicker = document.getElementById(\"date-picker\");\n    const time = datePicker.value;\n\n    // *** call saveTask\n    saveTask({ name, time, color });\n\n    // *** clear the form\n    setName(\"\");\n    setColor(\"blue\");\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"title-container\">\n        <h3>Add Task</h3>\n      </div>\n\n      <FaTimes onClick={onAdd} />\n\n      <form onSubmit={onSubmit}>\n        <div className=\"form-input\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Task Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            ref={inputRef}\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Time</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"d MMM yyyy h:mm aa\"\n            id=\"date-picker\"\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Colour</label>\n          <div className=\"radio-container\">\n            <input\n              type=\"radio\"\n              id=\"blue\"\n              value=\"blue\"\n              name=\"colour\"\n              checked={color === \"blue\"}\n              onChange={() => setColor(\"blue\")}\n            />\n            <label htmlFor=\"blue\" className=\"radio-blue\">\n              Blue\n            </label>\n            <input\n              type=\"radio\"\n              id=\"pink\"\n              value=\"pink\"\n              name=\"colour\"\n              checked={color === \"pink\"}\n              onChange={() => setColor(\"pink\")}\n            />\n            <label htmlFor=\"pink\" className=\"radio-pink\">\n              Pink\n            </label>\n            <input\n              type=\"radio\"\n              id=\"yellow\"\n              value=\"yellow\"\n              name=\"colour\"\n              checked={color === \"yellow\"}\n              onChange={() => setColor(\"yellow\")}\n            />\n            <label htmlFor=\"yellow\" className=\"radio-yellow\">\n              Yellow\n            </label>\n            <input\n              type=\"radio\"\n              id=\"green\"\n              value=\"green\"\n              name=\"colour\"\n              checked={color === \"green\"}\n              onChange={() => setColor(\"green\")}\n            />\n            <label htmlFor=\"green\" className=\"radio-green\">\n              Green\n            </label>\n            <input\n              type=\"radio\"\n              id=\"purple\"\n              value=\"purple\"\n              name=\"colour\"\n              checked={color === \"purple\"}\n              onChange={() => setColor(\"purple\")}\n            />\n            <label htmlFor=\"purple\" className=\"radio-purple\">\n              Purple\n            </label>\n          </div>\n        </div>\n\n        <input type=\"submit\" value=\"Save\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AddTaskForm;\n","import { useEffect, useState, useRef } from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nimport useKeyPress from \"./useKeyPress\";\n\nconst EditTaskForm = ({ onEdit, saveEditTask, clickedTask }) => {\n  const id = clickedTask.id;\n  const [name, setName] = useState(clickedTask.name);\n  const [startDate, setStartDate] = useState(new Date(clickedTask.time));\n  const [color, setColor] = useState(clickedTask.color);\n  const inputRef = useRef();\n\n  useEffect(() => {\n    // !!! focus on the first input box when component loaded\n    inputRef.current.focus();\n  }, []);\n\n  // !!! close edit task form window by clicking esc key (keyCode: 27)\n  useKeyPress(27, () => onEdit());\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // *** check if the task is empty\n    if (!name) {\n      alert(\"Please enter a task name.\");\n      return;\n    }\n\n    // *** get #date-picker's input value, then set it to \"time\" property\n    const datePicker = document.getElementById(\"date-picker\");\n    const time = datePicker.value;\n\n    // *** call saveEditTask\n    saveEditTask({ id, name, time, color });\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"title-container\">\n        <h3>Edit Task</h3>\n      </div>\n\n      <FaTimes onClick={onEdit} />\n\n      <form onSubmit={onSubmit}>\n        <div className=\"form-input\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Task Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            ref={inputRef}\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Time</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"d MMM yyyy h:mm aa\"\n            id=\"date-picker\"\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Colour</label>\n          <div className=\"radio-container\">\n            <input\n              type=\"radio\"\n              id=\"blue\"\n              value=\"blue\"\n              name=\"colour\"\n              checked={color === \"blue\"}\n              onChange={() => setColor(\"blue\")}\n            />\n            <label htmlFor=\"blue\" className=\"radio-blue\">\n              Blue\n            </label>\n            <input\n              type=\"radio\"\n              id=\"pink\"\n              value=\"pink\"\n              name=\"colour\"\n              checked={color === \"pink\"}\n              onChange={() => setColor(\"pink\")}\n            />\n            <label htmlFor=\"pink\" className=\"radio-pink\">\n              Pink\n            </label>\n            <input\n              type=\"radio\"\n              id=\"yellow\"\n              value=\"yellow\"\n              name=\"colour\"\n              checked={color === \"yellow\"}\n              onChange={() => setColor(\"yellow\")}\n            />\n            <label htmlFor=\"yellow\" className=\"radio-yellow\">\n              Yellow\n            </label>\n            <input\n              type=\"radio\"\n              id=\"green\"\n              value=\"green\"\n              name=\"colour\"\n              checked={color === \"green\"}\n              onChange={() => setColor(\"green\")}\n            />\n            <label htmlFor=\"green\" className=\"radio-green\">\n              Green\n            </label>\n            <input\n              type=\"radio\"\n              id=\"purple\"\n              value=\"purple\"\n              name=\"colour\"\n              checked={color === \"purple\"}\n              onChange={() => setColor(\"purple\")}\n            />\n            <label htmlFor=\"purple\" className=\"radio-purple\">\n              Purple\n            </label>\n          </div>\n        </div>\n\n        <input type=\"submit\" value=\"Save\" />\n      </form>\n    </div>\n  );\n};\n\nexport default EditTaskForm;\n","import { useState, useEffect } from \"react\";\n\nfunction getSavedValue(key, initialValue) {\n  const savedValue = JSON.parse(localStorage.getItem(key));\n\n  // *** if savedValue is not empty, return savedValue\n  if (savedValue) {\n    return savedValue;\n  }\n\n  // *** if savedValue is a function, then call that fucntion\n  if (initialValue instanceof Function) {\n    return initialValue();\n  }\n\n  // *** if not the above situations...\n  return initialValue;\n}\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    return getSavedValue(key, initialValue);\n  });\n\n  // *** when \"value\" is changed, use useEffect to store \"value\" to localStorage\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n};\n\nexport default useLocalStorage;\n","import { useState, useRef } from \"react\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport \"./App.scss\";\n\nimport Header from \"./components/Header\";\nimport Sorter from \"./components/Sorter\";\nimport Tasks from \"./components/Tasks\";\nimport AddTaskForm from \"./components/AddTaskForm\";\nimport EditTaskForm from \"./components/EditTaskForm\";\nimport useLocalStorage from \"./components/useLocalStorage\";\n\nfunction App() {\n  // !!! show add task form\n  const [showAddTaskForm, setShowAddTaskForm] = useState(false);\n\n  // !!! show edit task form\n  const [showEditTaskForm, setShowEditTaskForm] = useState(false);\n\n  // !!! get tasks from localStorage\n  const [tasks, setTasks] = useLocalStorage(\"saveTasks\", []);\n\n  // !!! set clickedTask\n  const [clickedTask, setClickedTask] = useState(\"\");\n\n  // !!! set colorTasks\n  const [colorTasks, setColorTasks] = useState([]);\n\n  // !!! set colorRef\n  const colorRef = useRef([]);\n\n  // !!! decide to show colorTasks or tasks\n  const [showColorTasks, setShowColorTasks] = useState(false);\n\n  // !!! save task\n  const saveTask = (task) => {\n    // *** use uuid to create universally unique id\n    const id = uuidv4();\n\n    const newTask = { id, ...task };\n\n    const newTasks = [newTask, ...tasks];\n\n    setTasks(newTasks);\n\n    // *** close the form\n    setShowAddTaskForm(!showAddTaskForm);\n\n    // *** hide colorTasks and show tasks\n    setShowColorTasks(false);\n  };\n\n  // !!! delete task\n  const deleteTask = (id) => {\n    const newTasks = tasks.filter((task) => task.id !== id);\n\n    setTasks(newTasks);\n\n    // *** if showColorTasks is true, show the updated colorTasks\n    if (showColorTasks) {\n      setColorTasks(newTasks.filter((task) => task.color === colorRef.current));\n    }\n  };\n\n  // !!! edit task\n  const editTask = (id) => {\n    // console.log(id);\n    const thisTask = tasks.find((task) => task.id === id);\n    // console.log(thisTask);\n    setClickedTask(thisTask);\n\n    // *** open the EditTaskForm\n    setShowEditTaskForm(!showEditTaskForm);\n  };\n\n  // !!! save edit task\n  const saveEditTask = (task) => {\n    // console.log(task);\n\n    // *** get edited task's index\n    const editTaskIndex = tasks.findIndex((t) => t.id === task.id);\n    // console.log(editTaskIndex);\n\n    // *** update edited task in the tasks array\n    tasks[editTaskIndex] = task;\n    // console.log(tasks);\n\n    // *** use spread operator to copy tasks, it produce a new tasks.\n    // *** In this way, then setTasks/useLocalStorage will save this updated tasks into localStorage. (If we didn't make a new copy, localStorage won't be updated.)\n    const newTasks = [...tasks];\n\n    // *** for rerender tasks\n    setTasks(newTasks);\n\n    // *** for rerender colorTasks\n    if (showColorTasks) {\n      // *** use the updated tasks to filter out the selected color tasks, then update colorTasks to that array.\n      // *** (because colorTasks is an array, we can use [0] to its first item and use it to access to its color value)\n      setColorTasks(tasks.filter((task) => task.color === colorTasks[0].color));\n      // console.log(colorTasks);\n    }\n\n    // *** close the EditTaskForm\n    setShowEditTaskForm(!showEditTaskForm);\n  };\n\n  // *** get color tasks\n  const getColorTasks = (color) => {\n    // console.log(color);\n\n    // *** when the \"all\" button is clicked\n    if (color === \"all\") {\n      // *** hide colorTasks and show tasks\n      setShowColorTasks(false);\n      return;\n    }\n\n    // *** filter out the selected color tasks, then update colorTasks to that array\n    setColorTasks(tasks.filter((task) => task.color === color));\n    // console.log(colorTasks);\n\n    // *** show colorTasks and hide tasks\n    setShowColorTasks(true);\n\n    // *** update colorRef\n    colorRef.current = color;\n  };\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTaskForm(!showAddTaskForm)} />\n\n      <Sorter getColorTasks={getColorTasks} />\n\n      {showAddTaskForm && (\n        <AddTaskForm\n          //*** close AddTaskForm\n          onAdd={() => setShowAddTaskForm(!showAddTaskForm)}\n          saveTask={saveTask}\n        />\n      )}\n\n      {showEditTaskForm && (\n        <EditTaskForm\n          //*** close EditTaskForm\n          onEdit={() => setShowEditTaskForm(!showEditTaskForm)}\n          clickedTask={clickedTask}\n          saveEditTask={saveEditTask}\n        />\n      )}\n\n      <Tasks\n        tasks={showColorTasks ? colorTasks : tasks}\n        originalTasks={tasks}\n        setColorTasks={setColorTasks}\n        showColorTasks={showColorTasks}\n        deleteTask={deleteTask}\n        editTask={editTask}\n        setTasks={setTasks}\n      />\n\n      {showColorTasks && colorTasks.length <= 0 && (\n        <p>\n          <em className={colorRef.current}>No {colorRef.current} tasks.</em>\n          <br />\n          There are no {colorRef.current} tasks to be completed.\n        </p>\n      )}\n\n      {!showColorTasks && tasks.length <= 0 && (\n        <p>\n          <em>Well done.</em>\n          <br />\n          There are no more tasks to be completed.\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// [\n//   {\n//     id: 1,\n//     name: \"Food Shopping\",\n//     time: \"08 Mar 2022 5:15 PM\",\n//     color: \"blue\",\n//   },\n//   {\n//     id: 2,\n//     name: \"Wash clothes\",\n//     time: \"23 Jul 2021 9:00 AM\",\n//     color: \"pink\",\n//   },\n//   {\n//     id: 3,\n//     name: \"Exercise\",\n//     time: \"26 Nov 2021 6:30 PM\",\n//     color: \"yellow\",\n//   },\n// ]\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}