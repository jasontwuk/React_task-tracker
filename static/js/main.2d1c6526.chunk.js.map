{"version":3,"sources":["components/Button.js","components/Header.js","components/Task.js","components/Tasks.js","components/AddTaskForm.js","components/EditTaskForm.js","components/useLocalStorage.js","App.js","index.js"],"names":["Button","text","onClick","className","defaultProps","Header","onAdd","Task","task","deleteTask","editTask","color","name","id","time","Tasks","tasks","setTasks","transition","useTransition","from","opacity","marginLeft","marginRight","enter","leave","config","duration","useState","dragging","setDragging","dragTask","useRef","dragNode","handleDragEnd","current","removeEventListener","getStyles","params","currentItem","map","item","key","props","div","style","draggable","onDragStart","e","target","addEventListener","setTimeout","handleDragStart","onDragEnter","newTasks","JSON","parse","stringify","hoverTaskIndex","findIndex","dragTaskIndex","splice","handleDragEnter","AddTaskForm","saveTask","setName","Date","startDate","setStartDate","setColor","useEffect","document","getElementById","focus","onSubmit","preventDefault","value","alert","type","placeholder","onChange","selected","date","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","checked","htmlFor","EditTaskForm","onEdit","saveEditTask","clickedTask","useLocalStorage","initialValue","localStorage","getItem","Function","getSavedValue","setValue","setItem","App","showAddTaskForm","setShowAddTaskForm","showEditTaskForm","setShowEditTaskForm","setClickedTask","uuidv4","editTaskIndex","t","filter","thisTask","find","length","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2d1c6526.chunk.js","sourcesContent":["import PropTypes from \"prop-types\";\n\nconst Button = ({ text, onClick }) => {\n  return (\n    <button className=\"btn\" onClick={onClick}>\n      {text}\n    </button>\n  );\n};\n\nButton.defaultProps = {\n  text: \"Button\",\n};\n\nButton.propTypes = {\n  text: PropTypes.string,\n  onClick: PropTypes.func,\n};\n\nexport default Button;\n","import Button from \"./Button\";\n\nconst Header = ({ onAdd }) => {\n  return (\n    <header className=\"header\">\n      <h1>Task Tracker</h1>\n      <Button text=\"Add\" onClick={onAdd} />\n    </header>\n  );\n};\n\nexport default Header;\n","import { FaTimes } from \"react-icons/fa\";\nimport { HiPencilAlt } from \"react-icons/hi\";\n\nconst Task = ({ task, deleteTask, editTask }) => {\n  return (\n    <div className={`task ` + task.color}>\n      <h3>\n        {task.name}\n        <FaTimes onClick={() => deleteTask(task.id)} />\n      </h3>\n      <span>\n        {task.time}\n        <HiPencilAlt onClick={() => editTask(task.id)} />\n      </span>\n    </div>\n  );\n};\n\nexport default Task;\n","import Task from \"./Task\";\nimport { useTransition, animated } from \"react-spring\";\nimport { useState, useRef } from \"react\";\n\nconst Tasks = ({ tasks, deleteTask, editTask, setTasks }) => {\n  // !!! for react-spring animation\n  const transition = useTransition(tasks, (task) => task.id, {\n    from: { opacity: 0, marginLeft: -200, marginRight: 200 },\n    enter: { opacity: 1, marginLeft: 0, marginRight: 0 },\n    leave: { opacity: 0, marginLeft: 300, marginRight: -300 },\n    config: { duration: 250 },\n  });\n\n  // !!! for drag and drop feature\n  const [dragging, setDragging] = useState(false);\n\n  const dragTask = useRef();\n  const dragNode = useRef();\n\n  const handleDragStart = (e, params) => {\n    // console.log(\"drag starting..\", params);\n\n    // *** set values\n    dragTask.current = params;\n    dragNode.current = e.target;\n\n    // *** add event listener on the dragged task (when drag end, call handleDragEnd)\n    dragNode.current.addEventListener(\"dragend\", handleDragEnd);\n\n    // *** apply the .current-dragging in a sync way, so when we drag an item, its background will turn grey (looks like a shadow) and the item that we are dragging will still maintain the same look.\n    setTimeout(() => {\n      setDragging(true);\n    }, 0);\n  };\n\n  const handleDragEnter = (e, params) => {\n    // console.log(\"Entering drag..\", params);\n    // console.log(e.target);\n    // console.log(dragNode.current);\n\n    // *** when entered task (e.target) and dragged task (dragNode.current) are different...\n    // *** [Note: it means the dragged task is hover other tasks]\n    if (e.target !== dragNode.current) {\n      // console.log(\"target is not the same\");\n\n      // *** make a deep copy of tasks\n      let newTasks = JSON.parse(JSON.stringify(tasks));\n\n      // *** get the hovered task's index\n      let hoverTaskIndex = newTasks.findIndex((task) => task.id === params.id);\n      // console.log(hoverIndex);\n\n      // *** get the dragged task's index\n      let dragTaskIndex = newTasks.findIndex(\n        (task) => task.id === dragTask.current.id\n      );\n      // console.log(currentTaskIndex);\n\n      // *** innner splice(): get the dragged task and delete it from the newTasks\n      // *** [Note: It returns an array, so use \"[0]\" to access the only item in this array]\n      // *** outter splice(): insert the dragged task into the hovered task's position\n      newTasks.splice(hoverTaskIndex, 0, newTasks.splice(dragTaskIndex, 1)[0]);\n      // console.log(newTasks);\n\n      // *** call setTasks() to update tasks in App.js\n      setTasks(newTasks);\n    }\n  };\n\n  const handleDragEnd = () => {\n    // console.log(\"ending drag..\");\n\n    // *** set dragging to false\n    setDragging(false);\n\n    // *** remove handleDragEnd eventListener\n    dragNode.current.removeEventListener(\"dragend\", handleDragEnd);\n\n    // *** reset values\n    dragTask.current = null;\n    dragNode.current = null;\n  };\n\n  const getStyles = (params) => {\n    const currentItem = dragTask.current;\n    // console.log(params);\n    // console.log(currentItem);\n\n    // *** add .current-dragging to the dragging task\n    if (params.id === currentItem.id) {\n      return \"current-dragging task-container\";\n    }\n    return \"task-container\";\n  };\n\n  return (\n    <>\n      {transition.map(({ item, key, props }) => (\n        <animated.div\n          key={key}\n          style={props}\n          draggable\n          onDragStart={(e) => {\n            handleDragStart(e, item);\n          }}\n          className={dragging ? getStyles(item) : \"task-container\"}\n          onDragEnter={\n            dragging\n              ? (e) => {\n                  handleDragEnter(e, item);\n                }\n              : null\n          }\n        >\n          <Task task={item} deleteTask={deleteTask} editTask={editTask} />\n        </animated.div>\n      ))}\n    </>\n  );\n};\n\nexport default Tasks;\n","import { useEffect, useState } from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst AddTaskForm = ({ onAdd, saveTask }) => {\n  const [name, setName] = useState(\"\");\n  const [startDate, setStartDate] = useState(new Date());\n  const [color, setColor] = useState(\"blue\");\n\n  useEffect(() => {\n    // !!! focus on #input-task when component loaded\n    const inputTask = document.getElementById(\"input-task\");\n\n    inputTask.focus();\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // *** check if the task is empty\n    if (!name) {\n      alert(\"Please enter a task name.\");\n      return;\n    }\n\n    // *** get #date-picker's input value, then set it to \"time\" property\n    const datePicker = document.getElementById(\"date-picker\");\n    const time = datePicker.value;\n\n    // *** call saveTask\n    saveTask({ name, time, color });\n\n    // *** clear the form\n    setName(\"\");\n    setColor(\"blue\");\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"title-container\">\n        <h3>Add Task</h3>\n      </div>\n\n      <FaTimes onClick={onAdd} />\n\n      <form onSubmit={onSubmit}>\n        <div className=\"form-input\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Task Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            id=\"input-task\"\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Time</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"d MMM yyyy h:mm aa\"\n            id=\"date-picker\"\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Colour</label>\n          <div className=\"radio-container\">\n            <input\n              type=\"radio\"\n              id=\"blue\"\n              value=\"blue\"\n              name=\"colour\"\n              checked={color === \"blue\"}\n              onChange={() => setColor(\"blue\")}\n            />\n            <label htmlFor=\"blue\" className=\"radio-blue\">\n              Blue\n            </label>\n            <input\n              type=\"radio\"\n              id=\"pink\"\n              value=\"pink\"\n              name=\"colour\"\n              checked={color === \"pink\"}\n              onChange={() => setColor(\"pink\")}\n            />\n            <label htmlFor=\"pink\" className=\"radio-pink\">\n              Pink\n            </label>\n            <input\n              type=\"radio\"\n              id=\"yellow\"\n              value=\"yellow\"\n              name=\"colour\"\n              checked={color === \"yellow\"}\n              onChange={() => setColor(\"yellow\")}\n            />\n            <label htmlFor=\"yellow\" className=\"radio-yellow\">\n              Yellow\n            </label>\n            <input\n              type=\"radio\"\n              id=\"green\"\n              value=\"green\"\n              name=\"colour\"\n              checked={color === \"green\"}\n              onChange={() => setColor(\"green\")}\n            />\n            <label htmlFor=\"green\" className=\"radio-green\">\n              Green\n            </label>\n            <input\n              type=\"radio\"\n              id=\"purple\"\n              value=\"purple\"\n              name=\"colour\"\n              checked={color === \"purple\"}\n              onChange={() => setColor(\"purple\")}\n            />\n            <label htmlFor=\"purple\" className=\"radio-purple\">\n              Purple\n            </label>\n          </div>\n        </div>\n\n        <input type=\"submit\" value=\"Save\" />\n      </form>\n    </div>\n  );\n};\n\nexport default AddTaskForm;\n","import { useEffect, useState } from \"react\";\nimport { FaTimes } from \"react-icons/fa\";\n\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst EditTaskForm = ({ onEdit, saveEditTask, clickedTask }) => {\n  const id = clickedTask.id;\n  const [name, setName] = useState(clickedTask.name);\n  const [startDate, setStartDate] = useState(new Date(clickedTask.time));\n  const [color, setColor] = useState(clickedTask.color);\n\n  useEffect(() => {\n    // !!! focus on #input-task when component loaded\n    const inputTask = document.getElementById(\"input-task\");\n\n    inputTask.focus();\n  }, []);\n\n  const onSubmit = (e) => {\n    e.preventDefault();\n\n    // *** check if the task is empty\n    if (!name) {\n      alert(\"Please enter a task name.\");\n      return;\n    }\n\n    // *** get #date-picker's input value, then set it to \"time\" property\n    const datePicker = document.getElementById(\"date-picker\");\n    const time = datePicker.value;\n\n    // *** call saveEditTask\n    saveEditTask({ id, name, time, color });\n  };\n\n  return (\n    <div className=\"form-container\">\n      <div className=\"title-container\">\n        <h3>Edit Task</h3>\n      </div>\n\n      <FaTimes onClick={onEdit} />\n\n      <form onSubmit={onSubmit}>\n        <div className=\"form-input\">\n          <label>Name</label>\n          <input\n            type=\"text\"\n            placeholder=\"Enter Task Name\"\n            value={name}\n            onChange={(e) => setName(e.target.value)}\n            id=\"input-task\"\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Time</label>\n          <DatePicker\n            selected={startDate}\n            onChange={(date) => setStartDate(date)}\n            showTimeSelect\n            timeFormat=\"HH:mm\"\n            timeIntervals={15}\n            timeCaption=\"time\"\n            dateFormat=\"d MMM yyyy h:mm aa\"\n            id=\"date-picker\"\n          />\n        </div>\n\n        <div className=\"form-input\">\n          <label>Colour</label>\n          <div className=\"radio-container\">\n            <input\n              type=\"radio\"\n              id=\"blue\"\n              value=\"blue\"\n              name=\"colour\"\n              checked={color === \"blue\"}\n              onChange={() => setColor(\"blue\")}\n            />\n            <label htmlFor=\"blue\" className=\"radio-blue\">\n              Blue\n            </label>\n            <input\n              type=\"radio\"\n              id=\"pink\"\n              value=\"pink\"\n              name=\"colour\"\n              checked={color === \"pink\"}\n              onChange={() => setColor(\"pink\")}\n            />\n            <label htmlFor=\"pink\" className=\"radio-pink\">\n              Pink\n            </label>\n            <input\n              type=\"radio\"\n              id=\"yellow\"\n              value=\"yellow\"\n              name=\"colour\"\n              checked={color === \"yellow\"}\n              onChange={() => setColor(\"yellow\")}\n            />\n            <label htmlFor=\"yellow\" className=\"radio-yellow\">\n              Yellow\n            </label>\n            <input\n              type=\"radio\"\n              id=\"green\"\n              value=\"green\"\n              name=\"colour\"\n              checked={color === \"green\"}\n              onChange={() => setColor(\"green\")}\n            />\n            <label htmlFor=\"green\" className=\"radio-green\">\n              Green\n            </label>\n            <input\n              type=\"radio\"\n              id=\"purple\"\n              value=\"purple\"\n              name=\"colour\"\n              checked={color === \"purple\"}\n              onChange={() => setColor(\"purple\")}\n            />\n            <label htmlFor=\"purple\" className=\"radio-purple\">\n              Purple\n            </label>\n          </div>\n        </div>\n\n        <input type=\"submit\" value=\"Save\" />\n      </form>\n    </div>\n  );\n};\n\nexport default EditTaskForm;\n","import { useState, useEffect } from \"react\";\n\nfunction getSavedValue(key, initialValue) {\n  const savedValue = JSON.parse(localStorage.getItem(key));\n\n  // *** if savedValue is not empty, return savedValue\n  if (savedValue) {\n    return savedValue;\n  }\n\n  // *** if savedValue is a function, then call that fucntion\n  if (initialValue instanceof Function) {\n    return initialValue();\n  }\n\n  // *** if not the above situations...\n  return initialValue;\n}\n\nconst useLocalStorage = (key, initialValue) => {\n  const [value, setValue] = useState(() => {\n    return getSavedValue(key, initialValue);\n  });\n\n  // *** when \"value\" is changed, use useEffect to store \"value\" to localStorage\n  useEffect(() => {\n    localStorage.setItem(key, JSON.stringify(value));\n  }, [value]);\n\n  return [value, setValue];\n};\n\nexport default useLocalStorage;\n","import { useState } from \"react\";\n\nimport { v4 as uuidv4 } from \"uuid\";\n\nimport \"./App.scss\";\n\nimport Header from \"./components/Header\";\nimport Tasks from \"./components/Tasks\";\nimport AddTaskForm from \"./components/AddTaskForm\";\nimport EditTaskForm from \"./components/EditTaskForm\";\nimport useLocalStorage from \"./components/useLocalStorage\";\n\nfunction App() {\n  // !!! show add task form\n  const [showAddTaskForm, setShowAddTaskForm] = useState(false);\n\n  // !!! show edit task form\n  const [showEditTaskForm, setShowEditTaskForm] = useState(false);\n\n  // !!! get tasks from localStorage\n  const [tasks, setTasks] = useLocalStorage(\"saveTasks\", []);\n\n  // !!! set clickedTask\n  const [clickedTask, setClickedTask] = useState(\"\");\n\n  // !!! save task\n  const saveTask = (task) => {\n    // *** use uuid to create universally unique id\n    const id = uuidv4();\n\n    const newTask = { id, ...task };\n\n    const newTasks = [newTask, ...tasks];\n\n    setTasks(newTasks);\n\n    // *** close the form\n    setShowAddTaskForm(!showAddTaskForm);\n  };\n\n  // !!! delete task\n  const deleteTask = (id) => {\n    const newTasks = tasks.filter((task) => task.id !== id);\n\n    setTasks(newTasks);\n  };\n\n  // !!! edit task\n  const editTask = (id) => {\n    // console.log(id);\n    const thisTask = tasks.find((task) => task.id === id);\n    // console.log(thisTask);\n    setClickedTask(thisTask);\n\n    // *** open the EditTaskForm\n    setShowEditTaskForm(!showEditTaskForm);\n  };\n\n  // !!! save edit task\n  const saveEditTask = (task) => {\n    // *** get edited task's index\n    const editTaskIndex = tasks.findIndex((t) => t.id === task.id);\n\n    // *** update edited task in the tasks array\n    tasks[editTaskIndex] = task;\n    // console.log(tasks);\n\n    // *** use spread operator to copy tasks, it produce a new tasks.\n    // *** In this way, then setTasks/useLocalStorage will save this updated tasks into localStorage. (If we didn't make a new copy, localStorage won't be updated.)\n    const newTasks = [...tasks];\n\n    setTasks(newTasks);\n\n    // *** close the EditTaskForm\n    setShowEditTaskForm(!showEditTaskForm);\n  };\n\n  return (\n    <div className=\"container\">\n      <Header onAdd={() => setShowAddTaskForm(!showAddTaskForm)} />\n      {showAddTaskForm && (\n        <AddTaskForm\n          //*** close AddTaskForm\n          onAdd={() => setShowAddTaskForm(!showAddTaskForm)}\n          saveTask={saveTask}\n        />\n      )}\n      {showEditTaskForm && (\n        <EditTaskForm\n          //*** close EditTaskForm\n          onEdit={() => setShowEditTaskForm(!showEditTaskForm)}\n          clickedTask={clickedTask}\n          saveEditTask={saveEditTask}\n        />\n      )}\n\n      <Tasks\n        tasks={tasks}\n        deleteTask={deleteTask}\n        editTask={editTask}\n        setTasks={setTasks}\n      />\n\n      {tasks.length <= 0 && (\n        <p>\n          <em>Well done.</em>\n          <br />\n          There are no more tasks to be completed.\n        </p>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n\n// [\n//   {\n//     id: 1,\n//     name: \"Food Shopping\",\n//     time: \"08 Mar 2022 5:15 PM\",\n//     color: \"blue\",\n//   },\n//   {\n//     id: 2,\n//     name: \"Wash clothes\",\n//     time: \"23 Jul 2021 9:00 AM\",\n//     color: \"pink\",\n//   },\n//   {\n//     id: 3,\n//     name: \"Exercise\",\n//     time: \"26 Nov 2021 6:30 PM\",\n//     color: \"yellow\",\n//   },\n// ]\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}